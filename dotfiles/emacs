(add-to-list 'load-path "~/.elisp")

(defun itap ()
  (string-equal (getenv "LOGNAME") "sbach"))

(require 'iswitchb)
(iswitchb-mode t)
(setq-default indent-tabs-mode nil)

(require 'hideshow)
(add-hook 'lisp-mode-hook (lambda () (hs-minor-mode 1)))
(add-hook 'emacs-lisp-mode-hook (lambda () (hs-minor-mode 1)))

(require 'lusty-explorer)

(when (file-exists-p "~/clojure")
  ;; TODO: cleanup
  (add-to-list 'load-path "~/clojure/swank-clojure")
  (setq swank-clojure-jar-path "~/clojure/clojure-svn/clojure.jar")
  (require 'swank-clojure-autoload)

  (eval-after-load "slime"
    '(add-to-list 'slime-lisp-implementations '(sbcl ("sbcl"))))

  (add-to-list 'load-path "~/clojure/clojure-mode")
  (require 'clojure-auto))

(defun close-buffer-and-window-unless-last ()
  (interactive)
  (let* ((buffer (current-buffer))
         (window (get-buffer-window buffer))
         (next (next-window window)))
    (kill-buffer buffer)
    (when (and window
               (not (eq window next)))
      (delete-window window))))

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key "\C-d" 'close-buffer-and-window-unless-last)

;; Put all backups into a single directory
(setq backup-directory-alist `(("." . ,(expand-file-name "~/.emacs-tmp"))))
(setq-default vc-make-backup-files t)

;; Don't warn about opening symlinked files.
(setq-default vc-follow-symlinks t)

(defun expand-load (filename)
  (when (stringp filename)
    (load-file (expand-file-name (format "~/.emacs.d/%s" filename)))))

(mapc 'expand-load
      `("look-and-feel.el"
        ,(and (itap) "qpx-ita.el")
        "viper-boot.el"))

(custom-set-variables
 '(load-home-init-file t t))
(custom-set-faces)
