(add-to-list 'load-path "~/.elisp")

(defun at-work-p ()
  (or (string-equal (getenv "LOGNAME") "sbach")
      (string-equal (getenv "LOGNAME") "sjbach")))

(setq-default indent-tabs-mode nil)

(require 'hideshow)
(defun display-code-line-counts (ov)
  (when (eq 'code (overlay-get ov 'hs))
    (overlay-put ov 'display
                 (propertize
                   (format " ...<%d>)"
                           (count-lines (overlay-start ov)
                                        (overlay-end ov)))
                   'face 'font-lock-constant-face))))
(setq hs-set-up-overlay 'display-code-line-counts)
(add-hook 'lisp-mode-hook (lambda () (hs-minor-mode 1)))
(add-hook 'emacs-lisp-mode-hook (lambda () (hs-minor-mode 1)))

(require 'lusty-explorer)

(when (file-exists-p "~/clojure")
  ;; TODO: cleanup
  ;(add-to-list 'load-path "~/clojure/swank-clojure")
  ;(setq swank-clojure-jar-path "~/clojure/clojure-git/clojure.jar")
  ;(require 'swank-clojure-autoload)

;  (eval-after-load "slime"
;    '(add-to-list 'slime-lisp-implementations '(sbcl ("sbcl"))))

  (add-to-list 'load-path "~/clojure/clojure-mode")
  (autoload 'clojure-mode "clojure-mode" "A major mode for Clojure" t)
  (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode)))

;(eval-after-load "slime"
;    '(add-to-list 'slime-lisp-implementations '(scheme ("mzscheme"))))

(defun close-buffer-and-window-unless-last ()
  (interactive)
  (let* ((buffer (current-buffer))
         (window (get-buffer-window buffer))
         (next (next-window window)))
    (kill-buffer buffer)
    (when (and window
               (not (eq window next)))
      (delete-window window))))

(global-set-key "\C-d" 'close-buffer-and-window-unless-last)
(global-set-key (kbd "C-S-L") 'latex-preview-pane-mode)

;; Put all backups into a single directory
(setq backup-directory-alist `(("." . ,(expand-file-name "~/.emacs-tmp"))))
(setq-default vc-make-backup-files t)

;; Don't warn about opening symlinked files.
(setq-default vc-follow-symlinks t)

(defun expand-load (filename)
  (when (stringp filename)
    (load-file (expand-file-name (format "~/.emacs.d/%s" filename)))))

(mapc 'expand-load
      `("look-and-feel.el"
;        "prose.el"
        "code-conventions.el"
        "misc.el"
        "R.el"
        "rust.el"
        "steve-evil.el"
        ,(and (file-exists-p "~/.emacs.d/nonpublic.el") "nonpublic.el")
        ))

;; Use Spotlight for `locate` command on OS X
(when (string-equal system-type "darwin")
  (setq locate-command "mdfind"))

(defmacro STEVE-dp (arg)
  `(let ((STEVE-name ',arg)
         (STEVE-val ,arg))
     (message "STEVE-dp %S: %S" STEVE-name STEVE-val)
     STEVE-val))

; ELPA:
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
;(package-initialize)
;(package-list) ; to update
; Then: M-x package-install foo

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js-indent-level 2)
 '(load-home-init-file t t)
 '(package-selected-packages
   '(elisp-slime-nav ample-theme adaptive-wrap racer flycheck-rust company cargo))
 '(warning-suppress-types '((undo discard-info))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
