;;;
;;; Vim-like stuff
;;; Also see:
;;;   ~/.emacs.d/viper-setup.el
;;;   ~/.elisp/vimpulse.el
;;;   ~/.elisp/viper-in-more-modes.el
;;;

(setq-default viper-inhibit-startup-message t)
(setq-default viper-expert-level '5)
(setq-default viper-want-ctl-h-help t)
(setq-default viper-ESC-moves-cursor-back t)
(setq-default viper-auto-indent t)
(setq-default viper-keep-point-on-repeat nil)
(setq-default viper-toggle-key (kbd "C-;"))  ;; FIXME: no worky in terminal.
(setq-default viper-ESC-keyseq-timeout 0)
(setq-default viper-translate-all-ESC-keysequences nil)
(setq-default viper-change-notification-threshold 200)

; Allow backspace past start of edit and beginning of line.
(setq-default viper-ex-style-editing nil)  

; Non-sluggish paren matching (using "%" key).
(viper-set-parsing-style-toggling-macro 'undefine)

; Vimpulse/Viper modification
(define-key viper-insert-global-user-map "\C-[" 'viper-intercept-ESC-key)
(define-key viper-insert-global-user-map "\C-g" 'viper-intercept-ESC-key)
(define-key viper-vi-global-user-map "\C-d"
                                     'close-buffer-and-window-unless-last)
(define-key viper-vi-global-user-map "\C-y" (lambda ()
                                              (interactive)
                                              (viper-scroll-down-one 3)))
(define-key viper-vi-global-user-map "\C-e" (lambda ()
                                              (interactive)
                                              (viper-scroll-up-one 3)))
(define-key viper-vi-global-user-map ",f" 'find-file)
(define-key viper-vi-global-user-map ",r" 'lusty-file-explorer)
(define-key viper-vi-global-user-map ",b" 'lusty-buffer-explorer)
(define-key viper-vi-global-user-map (kbd "TAB")
                                     (lambda ()
                                       (interactive)
                                       (switch-to-buffer (other-buffer))))
(define-key viper-vi-global-user-map ",xo" 'other-window)
(define-key viper-vi-global-user-map ",x0" 'delete-window)
(define-key viper-vi-global-user-map ",x1" 'delete-other-windows)
(define-key viper-vi-global-user-map ",A" 'beginning-of-defun)
(define-key viper-vi-global-user-map ",v" 'vimpulse-vim-excursion)
(define-key viper-vi-global-user-map ",xl"
                                     'qpx-slime-startup-or-goto-existing-repl)
(define-key viper-vi-global-user-map ",xq" 'slime-quit-lisp)
(define-key viper-vi-global-user-map ",xs" 'slime-selector)
(define-key viper-vi-global-user-map "=" 'indent-according-to-mode)
(define-key viper-vi-global-user-map ";" 'execute-extended-command)

;; Help-mode and Info-mode should be in viper
(setq viper-emacs-state-mode-list
      (remove 'Info-mode (remove 'help-mode viper-emacs-state-mode-list)))

;; Add more viper-ified modes
(setq viper-vi-state-mode-list (append viper-vi-state-mode-list
                                       '(grep-mode
                                         slime-xref-mode
                                         slime-repl-mode
                                         help-mode
                                         Info-mode
                                         debugger-mode
                                         apropos-mode
                                         completion-list-mode)))

;; Help-mode fixes
(setq viper-help-mode-fixes (make-sparse-keymap))
(define-key viper-help-mode-fixes "q" 'View-quit)
;(define-key viper-help-mode-fixes [return] 'help-follow)
(viper-modify-major-mode 'help-mode 'vi-state viper-help-mode-fixes)

;; Info-mode fixes
(setq viper-info-mode-fixes (make-sparse-keymap))
(define-key viper-info-mode-fixes "q" 'Info-exit)
(define-key viper-info-mode-fixes (kbd "RET") 'Info-follow-nearest-node)
(viper-modify-major-mode 'Info-mode 'vi-state viper-info-mode-fixes)

;; Apropos-mode fixes
(setq viper-apropos-mode-fixes (make-sparse-keymap))
(define-key viper-apropos-mode-fixes "q" 'quit-window)
(define-key viper-apropos-mode-fixes (kbd "RET") 'apropos-follow)
(viper-modify-major-mode 'apropos-mode 'vi-state viper-apropos-mode-fixes)

;; Completion-list-mode fixes
(setq viper-completion-list-mode-fixes (make-sparse-keymap))
;(define-key viper-completion-list-mode-fixes "q" 'quit-window)
(define-key viper-completion-list-mode-fixes (kbd "RET") 'choose-completion)
(viper-modify-major-mode 'completion-list-mode 'vi-state
                         viper-completion-list-mode-fixes)
(add-hook 'completion-list-mode-hook '(lambda ()
                                        (viper-change-state-to-vi)))

;; Debugger-mode fixes
(setq viper-debugger-mode-fixes (make-sparse-keymap))
(define-key viper-debugger-mode-fixes "q" 'top-level)
(viper-modify-major-mode 'debugger-mode 'vi-state viper-debugger-mode-fixes)

;; SLIME XREF fixes
(setq viper-slime-xref-fixes (make-sparse-keymap))
(define-key viper-slime-xref-fixes (kbd "RET") 'slime-show-xref)
(define-key viper-slime-xref-fixes (kbd "SPACE") 'slime-goto-xref)
(define-key viper-slime-xref-fixes "q" 'slime-xref-quit)
(viper-modify-major-mode 'slime-xref-mode 'vi-state viper-slime-xref-fixes)
(add-hook 'slime-xref-mode-hook (lambda () (viper-change-state-to-vi)))

;; Grep mode fixes
(setq viper-grep-mode-fixes (make-sparse-keymap))
(define-key viper-grep-mode-fixes "q" 'close-buffer-and-window-unless-last)
(viper-modify-major-mode 'grep-mode 'vi-state viper-grep-mode-fixes)

;; SLIME macroexpansion mode fixes
(defun steve-slime-temp-buffer-fixes ()
  (when (string-equal (buffer-name) "*SLIME macroexpansion*")
    (viper-change-state-to-vi)
    (viper-add-local-keys 'vi-state '(("q" . slime-temp-buffer-quit)))))
(add-hook 'lisp-mode-hook 'steve-slime-temp-buffer-fixes)

(defun steve-slime-repl-forward ()
  (interactive)
  (slime-repl-history-replace 'forward))

(defun steve-slime-repl-backward ()
  (interactive)
  (slime-repl-history-replace 'backward))

;; SLIME REPL fixes
(defun steve-slime-repl-fixes ()
  (viper-change-state-to-vi)
  (viper-add-local-keys 'vi-state
                        `((,(kbd "RET") . slime-repl-closing-return)
                          (,(kbd "RET") . slime-repl-closing-return)
                          ("\C-n" . steve-slime-repl-forward)
                          ("\C-p" . steve-slime-repl-backward)))
  (viper-add-local-keys 'insert-state
                        '(("\C-n" . steve-slime-repl-forward)
                          ("\C-p" . steve-slime-repl-backward)))

  (viper-modify-major-mode 'slime-repl-mode 'vi-state my-lisp-modified-vi-map)
  ;(viper-modify-major-mode 'slime-repl-mode 'vi-state my-repl-modified-vi-map)
  ;(viper-modify-major-mode 'slime-repl-mode 'insert-state
  ;                         my-repl-modified-insert-map)
  )
(add-hook 'slime-repl-mode-hook 'steve-slime-repl-fixes)

; - remember viper-harness-minor-mode
; - don't show date on (qgrep)
; - make (qgrep) window the height of its output
; don't prompt when creating new scratch buffer
; map ESC to end visual mode (which C-g does)
; map ESC to end search mode (which C-g does)
; map C-[ to end search mode (which C-g does)
; remember "] register"
; make '/' use I-search (C-s) instead of viper search
; make '?' use reverse I-search (C-r) instead of viper search
; make ESC break out of ex mode
; - in repl, RETURN runs expr unless it's above 'SCH>'
; repl:
;  M-., <SPACE>-g
; debugger:
;  j, k, h, l
; *grep*:
;  <SPACE>-r
; - map key to select *scratch*
